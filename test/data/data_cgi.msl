scenario(name: "data_cgi") {
    hosts {
        # a2/192.168.40.217|
        &host_0 = host(type: v4)
        # 192.168.40.9|
        &host_1 = host(type: v4)
    }

    options {
        # data_length|data length
        $data_length = "3"
        # data|data
        $data = "123"
        # data_type|data type
        $data_type = "numbers"
        # url|url
        $url = "/whats_my_data.cgi?data"
        # http_port|http_port
        $http_port = "80"
    }

    steps {
        HTTP_80 = tcp(timeout: 10000, src: &host_0, dst: &host_1, dst_port: $http_port)

        # GET /whats_my_data.cgi?data=123 HTTP/1.1
        HTTP_GET_Client_Send = HTTP_80.client_send {
            # get|GET /whats_my_data.cgi?data=123 HTTP/1.1\r\n
            line [
                dsv(delimiter: " ") [
                    # request_method|Request Method: GET
                    "GET"
                    dsv(delimiter: "=") [
                        $url
                        $data
                    ]
                    "HTTP/1.1"
                ]
            ]
            # host|Host: dell-9\r\n
            "Host: dell-9\r\n"
            # user_agent|User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\r\n
            "User-Agent: Mozilla/5.0 (Macintosh; U; Intel Mac OS X 10.5; en-US; rv:1.9.1.3) Gecko/20090824 Firefox/3.5.3\r\n"
            # accept|Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n
            "Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8\r\n"
            # accept_language|Accept-Language: en-us,en;q=0.5\r\n
            "Accept-Language: en-us,en;q=0.5\r\n"
            # accept_encoding|Accept-Encoding: gzip,deflate\r\n
            "Accept-Encoding: gzip,deflate\r\n"
            # accept_charset|Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n
            "Accept-Charset: ISO-8859-1,utf-8;q=0.7,*;q=0.7\r\n"
            # keep_alive|Keep-Alive: 300\r\n
            "Keep-Alive: 300\r\n"
            # connection|Connection: keep-alive\r\n
            "Connection: keep-alive\r\n"
            # cache_control|Cache-Control: max-age=0\r\n
            "Cache-Control: max-age=0\r\n"
            # |\r\n
            "\r\n"
        }

        # GET /whats_my_data.cgi?data=123 HTTP/1.1
        HTTP_GET_Server_Receive = HTTP_GET_Client_Send.server_receive

        # HTTP/1.1 200 OK  (text/html)
        HTTP_Server_Send = HTTP_80.server_send {
            # http|HTTP/1.1 200 OK\r\n
            "HTTP/1.1 200 OK\r\n"
            # date|Date: Wed, 16 Sep 2009 00:09:17 GMT\r\n
            "Date: Wed, 16 Sep 2009 00:09:17 GMT\r\n"
            # server|Server: Apache/2.0.52 (CentOS)\r\n
            "Server: Apache/2.0.52 (CentOS)\r\n"
            # content_length_header|Content-Length: 243\r\n
            "Content-Length: 243\r\n"
            # connection|Connection: close\r\n
            "Connection: close\r\n"
            # content_type|Content-Type: text/html; charset=UTF-8\r\n
            "Content-Type: text/html; charset=UTF-8\r\n"
            # |\r\n
            "\r\n"
            "<"
            "<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01//EN\" \"http://www.w3.org/TR/html4/strict.dtd\"><HTML><HEAD><TITLE>What\'s My Data?</TITLE></HEAD><BODY><H1>Data has been analyzed</H1><P>Input: 123</P><P>Length: 3</P><P>Type: numbers</P></BODY></HTML>"
        }

        # HTTP/1.1 200 OK  (text/html)
        HTTP_Client_Receive = HTTP_Server_Send.client_receive {
            assertions {
                # data type check
                string(/Type: (.+?)</:1) == $data_type
                # data length check
                string(/Length: (.+?)</:1) >= $data_length
            }
        }
    }
}